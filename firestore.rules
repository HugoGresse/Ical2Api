rules_version = '2';
service cloud.firestore {
    match /databases/{database}/documents {

        function authenticated() { return request.auth.uid != null }
        function isAdmin(data) { return data.owner == request.auth.uid || request.auth.uid in data.members}
        function isEmailVerified() { return request.auth.token.email_verified == true }

        // DB Read
        function organizationData(organizationId) { return get(/databases/$(database)/documents/organizations/$(organizationId)).data }

        match /events/{eventId} {
            allow read: if true;
        }

        match /icals/{icalId} {
            allow read: if  authenticated() && isAdmin(organizationData(resource.data.organizationId));
            allow write: if authenticated() && isAdmin(organizationData(request.resource.data.organizationId));
        }

        match /reminders/{reminderId} {
            allow read: if authenticated() && isAdmin(organizationData(resource.data.organizationId));
            allow write: if authenticated() && isAdmin(organizationData(request.resource.data.organizationId));
        }

        match /organizations/{organizationId} {
            allow get: if true;
            allow list: if authenticated() && isAdmin(resource.data) && isEmailVerified();
            allow create: if authenticated();
            allow update: if authenticated() && isAdmin(resource.data) && isEmailVerified();
            allow delete: if authenticated() && isAdmin(resource.data) && isEmailVerified();
        }

        match /organizationsPrivateData/{orgPrivateDataId} {
            allow read: if false;
        }
    }
}
